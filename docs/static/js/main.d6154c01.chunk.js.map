{"version":3,"sources":["logo.svg","components/YoutubeForm.js","App.js","reportWebVitals.js","index.js"],"names":["YoutubeForm","validationSchema","Yup","name","required","email","channel","initialValues","onSubmit","values","console","log","className","htmlFor","type","id","App","Helmet","content","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAAe,I,oBCiEAA,EA7DK,WAClB,IAUMC,EAAmBC,IAAW,CAClCC,KAAMD,MAAaE,SAAS,YAC5BC,MAAOH,MACJG,MAAM,wBACND,SAAS,YACZE,QAASJ,MAAaE,SAAS,cAIjC,OACE,cAAC,IAAD,CACEG,cArBkB,CACpBJ,KAAM,GACNE,MAAO,GACPC,QAAS,IAmBPL,iBAAoBA,EACpBO,SAjBa,SAACC,GAChBC,QAAQC,IAAIF,IAaZ,SAKE,eAAC,IAAD,WACE,sBAAKG,UAAU,eAAf,UACE,uBAAOC,QAAQ,OAAf,kBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,OACHZ,KAAK,SAGP,cAAC,IAAD,CAAcA,KAAK,YAErB,sBAAKS,UAAU,eAAf,UACE,uBAAOC,QAAQ,QAAf,mBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,QACHZ,KAAK,UAEP,cAAC,IAAD,CAAcA,KAAK,aAErB,sBAAKS,UAAU,eAAf,UACE,uBAAOC,QAAQ,UAAf,qBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,UACHZ,KAAK,YAEP,cAAC,IAAD,CAAcA,KAAK,eAErB,wBAAQW,KAAK,SAAb,0B,QCvCOE,MAff,WACE,OACE,gCACE,eAACC,EAAA,EAAD,WACE,gDACA,sBAAMd,KAAK,cAAce,QAAQ,uCACjC,sBAAMf,KAAK,SAASe,QAAQ,mBAC5B,sBAAMC,MAAM,kBAGd,cAAC,EAAD,QCHSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d6154c01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { useFormik, Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup'\r\n\r\nconst YoutubeForm = () => {\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    channel: \"\",\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string().required('Required'),\r\n    email: Yup.string()\r\n      .email('Invalid email format')\r\n      .required('Required'),\r\n    channel: Yup.string().required('Required'),\r\n  })\r\n  \r\n\r\n  return (\r\n    <Formik \r\n      initialValues={initialValues}\r\n      validationSchema = {validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"name\">Name</label>\r\n          <Field\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            \r\n          />\r\n          <ErrorMessage name='name'/>\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <Field\r\n            type=\"text\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n          />\r\n          <ErrorMessage name='email'/>\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"channel\">Channel</label>\r\n          <Field\r\n            type=\"text\"\r\n            id=\"channel\"\r\n            name=\"channel\"\r\n          />\r\n          <ErrorMessage name='channel'/>\r\n        </div>\r\n        <button type='submit'>Submit</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default YoutubeForm;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport YoutubeForm from \"./components/YoutubeForm\";\nimport { Helmet } from \"react-helmet\";\n\nfunction App() {\n  return (\n    <div>\n      <Helmet>\n        <title>Hello World</title>\n        <meta name='description' content='this is a glitch i wonder if htere'/>\n        <meta name='author' content='ibrahim yaacob'/>\n        <body class='megalodone'/>\n      </Helmet>\n\n      <YoutubeForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}